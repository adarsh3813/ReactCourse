1.  What is `NPM`?

    package manager for the JavaScript runtime environment Node.js
    provides- package-Management, Dependency Management, Scripting(in package.json)

2.  What is `Parcel/Webpack`? Why do we need it?

    both module bundlers, compile and organize JavaScript modules into bundled assets that can be served to a web browser.

    Uses: creates server for us, hot module replacement, gives file watcher(C++), bundling, minifies,
    optimization, caching while dev, manages port no, zero Config, Tree shaking

3.  What is `.parcel-cache`

    a directory generated by the Parcel bundler, serving as a cache for storing intermediate build results

4.  What is `npx`?

    package runner tool, allows you to execute Node.js packages

5.  What is difference between `dependencies` vs `devDependencies`?

    dependencies- essential for app to run in production, --save
    devDependencies- only needed during development and testing of the application, not in prod, --save-dev or -D

6.  What is Tree Shaking?

    that eliminates unused code from your final bundled JavaScript files, reduce the size of your application bundle, resulting in faster load times and better performance.

7.  What is Hot Module Replacement?

    allows developers to update modules in a running application without needing to refresh the entire page or lose the current application state

●- List down your favourite 5 superpowers of Parcel and describe any 3 of them in yourown words.●-

8.  What is `.gitignore`? What should we add and not add into it?

    specify intentionally untracked files and directories that Git should ignore, file in .gitignore will not be included in commits or appear in the output of commands

    Add- node_modules, parcel-Cache, dist
    Not add- package.json, package_lock.json

9.  What is the difference between `package.json` and `package-lock.json`

    package.json- metadata file, information about the project, name, version, description, author, license, and the list of dependencies

    package-lock.json- serves as a record of the exact versions of dependencies installed in your project's node_modules directory.

10. What is `node_modules` ? Is it a good idea to push that on git?

    directory in Node.js projects that contains all the dependencies installed for the project
    Not a good idea, large file, can be regenerated

11. What is the `dist` folder?

    dirrectory which contains deployment-ready version of the project, which is optimized and bundled for production use

12. What is `browserlists`?

    a property in package.json to provide browser support
    Babel takes care of browser support, takes our code and converts it into suitable js code for diff browsers

13. What is polyfills?
14. Transitive dependencies, where are they stored?